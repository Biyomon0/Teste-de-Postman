{
	"info": {
		"_postman_id": "acf9aa5b-0909-492e-bf71-a56b80ee1248",
		"name": "Teste_de_Postman",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "store",
			"item": [
				{
					"name": "order",
					"item": [
						{
							"name": "{order Id}",
							"item": [
								{
									"name": "Find purchase order by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response no formato json\"), function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"}\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"            \"id\":                                 { \"type\": [\"number\",\"null\"]},\r",
													"            \"petId\":                              { \"type\": [\"number\",\"null\"]},\r",
													"            \"quantity\":                           { \"type\": [\"number\",\"null\"]},\r",
													"            \"shipDate\":                           { \"type\": [\"string\",\"null\"]},\r",
													"            \"status\":                             { \"type\": [\"string\",\"null\"]},\r",
													"            \"complete\":                           { \"type\": [\"boolean\",\"null\"]}\r",
													"            \r",
													"            },\r",
													"                \"required\": [\"id\",\"petId\",\"quantity\",\"shipDate\",\"status\",\"complete\"]\r",
													"};\r",
													"pm.test(\"Validar Schema dos campos de acordo com documentação\",()=> {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"    \r",
													"    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "1",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										},
										"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": -26407317,\n \"petId\": 27686420,\n \"quantity\": -70696474,\n \"shipDate\": \"2011-07-24T09:14:12.988Z\",\n \"status\": \"approved\",\n \"complete\": false\n}"
										},
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store/status 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response no formato json\"), function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"}\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\":                                               { \"type\": [\"number\",\"null\"]},\r",
									"                \"category\":{ \r",
									"                    \"type\": \"object\",\r",
									"                        \"properties\": {       \r",
									"                        \"id\":                                   { \"type\": [\"number\",\"null\"]},\r",
									"                        \"name\":                                 { \"type\": [\"string\",\"null\"]}\r",
									"                },\r",
									"            \"name\":                                             { \"type\": [\"string\",\"null\"]},\r",
									"            \"photoUrls\":{ \r",
									"                \"type\" : \"array\",\r",
									"                    \"properties\":{\r",
									"                        \"items\":{   \r",
									"                            \"type\": \"string\"\r",
									"                            }\r",
									"                    },\r",
									"            \"tags\": { \r",
									"                \"type\" : \"array\",\r",
									"                    \"properties\":{\r",
									"                        \"id\":                                   { \"type\": [\"number\",\"null\"]},\r",
									"                        \"name\":                                 { \"type\": [\"string\",\"null\"]} \r",
									"                        },\r",
									"                        \"status\":                               { \"type\": [\"string\",\"null\"]}\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        };\r",
									"pm.test(\"Validar Schema dos campos de acordo com documentação\",()=> {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"dolor in labore occaecat cupidatat\",\n        \"proident aliqua et nostrud\"\n    ],\n    \"id\": -33119511,\n    \"category\": {\n        \"id\": 81694636,\n        \"name\": \"aliquip irure fugiat pariatur\"\n    },\n    \"tags\": [\n        {\n            \"id\": 717158,\n            \"name\": \"et labore\"\n        },\n        {\n            \"id\": 69068641,\n            \"name\": \"adipisicing culpa Lorem deserunt\"\n        }\n    ],\n    \"status\": \"sold\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new pet to the store/status 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"            \"code\":                                { \"type\": [\"number\",\"null\"]},\r",
									"            \"type\":                                { \"type\": [\"string\",\"null\"]},\r",
									"            \"message\":                             { \"type\": [\"string\",\"null\"]}\r",
									"            \r",
									"            }\r",
									"         \r",
									"    \r",
									"};\r",
									"\r",
									"pm.test(\"Validar Schema dos campos de acordo com documentação\",()=> {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response no formato json\"), function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"dolor in labore occaecat cupidatat\",\n        \"proident aliqua et nostrud\"\n    ],\n    \"id\": gabriel,\n    \"category\": {\n        \"id\": 81694636,\n        \"name\": \"aliquip irure fugiat pariatur\"\n    },\n    \"tags\": [\n        {\n            \"id\": 717158,\n            \"name\": \"et labore\"\n        },\n        {\n            \"id\": 69068641,\n            \"name\": \"adipisicing culpa Lorem deserunt\"\n        }\n    ],\n    \"status\": \"sold\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet/ status 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response no formato json\"), function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"}\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\":                                               { \"type\": [\"number\",\"null\"]},\r",
									"                \"category\":{ \r",
									"                    \"type\": \"object\",\r",
									"                        \"properties\": {       \r",
									"                        \"id\":                                   { \"type\": [\"number\",\"null\"]},\r",
									"                        \"name\":                                 { \"type\": [\"string\",\"null\"]}\r",
									"                },\r",
									"            \"name\":                                             { \"type\": [\"string\",\"null\"]},\r",
									"            \"photoUrls\":{ \r",
									"                \"type\" : \"array\",\r",
									"                    \"properties\":{\r",
									"                        \"items\":{   \r",
									"                            \"type\": \"string\"\r",
									"                            }\r",
									"                    },\r",
									"            \"tags\": { \r",
									"                \"type\" : \"array\",\r",
									"                    \"properties\":{\r",
									"                        \"id\":                                   { \"type\": [\"number\",\"null\"]},\r",
									"                        \"name\":                                 { \"type\": [\"string\",\"null\"]} \r",
									"                        },\r",
									"                        \"status\":                               { \"type\": [\"string\",\"null\"]}\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        };\r",
									"pm.test(\"Validar Schema dos campos de acordo com documentação\",()=> {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"irure consequat commodo enim\",\n        \"id dolore irure eu Ut\"\n    ],\n    \"id\": -11192002,\n    \"category\": {\n        \"id\": -5580463,\n        \"name\": \"irure dolore\"\n    },\n    \"tags\": [\n        {\n            \"id\": -16910400,\n            \"name\": \"elit veniam\"\n        },\n        {\n            \"id\": 61662836,\n            \"name\": \"aliqua\"\n        }\n    ],\n    \"status\": \"pending\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet/ status 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status status 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"            \"code\":                                { \"type\": [\"number\",\"null\"]},\r",
									"            \"type\":                                { \"type\": [\"string\",\"null\"]},\r",
									"            \"message\":                             { \"type\": [\"string\",\"null\"]}\r",
									"            \r",
									"            }\r",
									"         \r",
									"    \r",
									"};\r",
									"\r",
									"pm.test(\"Validar Schema dos campos de acordo com documentação\",()=> {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"    \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response no formato json\"), function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n        \"irure consequat commodo enim\",\n        \"id dolore irure eu Ut\"\n    ],\n    \"id\": -gabriel,\n    \"category\": {\n        \"id\": -5580463,\n        \"name\": \"irure dolore\"\n    },\n    \"tags\": [\n        {\n            \"id\": -16910400,\n            \"name\": \"elit veniam\"\n        },\n        {\n            \"id\": 61662836,\n            \"name\": \"aliqua\"\n        }\n    ],\n    \"status\": \"pending\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}